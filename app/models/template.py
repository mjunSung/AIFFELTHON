from langchain.prompts import PromptTemplate

# 1. 사용자 선호도 추출 프롬프트 (원본)
def get_extract_pref_prompt_v2():
    return PromptTemplate(
    input_variables=["text"],
    template="""
다음 사용자 발화에서 사용자의 선호도 및 책에 대한 요구사항을 아래 JSON 형식으로 추출해라. 각 항목은 관련된 정보가 명확할 때만 명확한 항목에 포함(예: 소설 -> category)하고, 없다면 빈 리스트 [] 또는 빈 문자열 ""로 남겨라. 여러 개가 추출될 수 있는 항목은 리스트로 추출하라.
사용자 입력에서 모호한 정보는 implicit info로 포함해라.
존재하지 않는 사용자 선호도 정보는 임의로 생성하지 마라.

입력: {{ text }}

출력 형식 (JSON, 다른 설명 없이 JSON만 출력):
{
    "title": [<!-- 추출된 책 제목 -->],
    "author": [<!-- 추출된 책 저자 -->],
    "category": [<!-- 추출된 책 분류/장르 (예: 소설, 에세이, 기술 등) -->],
    "author_intro": [<!-- 저자 특성 언급/요구사항 -->],
    "book_intro": [<!-- 줄거리 관련 언급/요구사항 -->],
    "table_of_contents": [<!-- 세부적인 키워드 언급/요구사항 -->],
    "purpose": [<!-- 사용자의 독서 목적/이유 (예: 재미, 학습, 시간 때우기, 기분 등) -->],
    "implicit info": [<!-- 추천해야 할 책에 대한 암시적 정보/특징/분위기 (예: 밝은 분위기, 특정 상황에 어울리는 책, 최신 기술 동향 등) -->]
}
""",
    template_format="jinja2",
)

# 2. 선호도 통합 프롬프트 (원본)
def get_consolidate_pref_prompt():
    return PromptTemplate(
    input_variables=["existing_preferences", "new_preferences"],
    template="""
기존에 수집된 사용자 선호도 정보와 새로 추출된 선호도 정보가 주어졌다. 두 정보를 지능적으로 통합하여 중복을 제거하고 관련 내용을 요약/결합하여 최종 선호도 목록을 생성해라.

[기존 선호도]
{{ existing_preferences }}

[새로운 선호도]
{{ new_preferences }}

[통합된 최종 선호도 목록]
(아래 목록 형태로만 출력, 각 항목은 문자열 리스트)
- 항목1: ["통합 내용1", "통합 내용2"]
- 항목2: ["통합 내용3"]
...
""",
    template_format="jinja2",
)

# 3. Decision Prompt (원본)
def get_decision_prompt_template():
    return PromptTemplate(
    input_variables=["history", "query", "preferences", "role_instructions"],
    template="""
[대화 맥락]
사용자 대화 내역:
{{ history }}
사용자의 최신 질문: "{{ query }}"
수집된 사용자 선호도:
{{ preferences }}

[역할 및 목표]
{{ role_instructions }}

현재 대화 상황, 질문, 수집된 선호도를 분석하여 아래 두 가지 행동 중 하나만 결정하고 필요한 정보를 생성해라.
- "추천": 사용자가 명시적으로 추천을 요청했거나, 사용자의 선호도 정보(예: 카테고리, 저자, 목적, 책 줄거리, 사용자 수준, 분위기 등)를 반드시 3개 이상 수집했을 때 추천.
- "추가 질문": 정보가 부족하거나 모호할 때, 더 구체적인 선호도 정보를 얻기 위한 추가 질문을 생성.

[출력 형식] (반드시 아래 형식만 정확히 따를 것)
행동: <추천 또는 추가 질문>
추가 질문: <"추가 질문" 행동일 경우 구체적인 질문 생성, "추천"일 경우 빈 문자열>
""",
    template_format="jinja2",
)
    
# 4. Final Query Generation Prompt
def get_literature_final_query_template():
    return PromptTemplate(
    template="""
**명령:** 아래 제공된 모든 정보를 **반드시 종합적으로 분석**하여, 문학 도서 검색에 최적화된 **핵심 키워드 중심의 최종 검색 쿼리**를 **단 한 문장**으로 생성하라.

**입력 정보:**
[대화 요약]
{{ history }}
[사용자 요청]
{{ query }}
[페르소나 정보]
{{ persona_info }} (감성, 분위기, 문체, 작가 스타일 등 문학적 요소 강조)
[사용자 선호도 요약]
{{ preferences }}

**쿼리 생성 지침:**
1.  **정보 통합:** 모든 입력 정보(대화 맥락, 요청, 페르소나, 선호도)를 누락 없이 반영하라.
2.  **키워드 중심:** 검색 시스템이 효과적으로 인식할 수 있는 명사, 핵심 형용사 위주로 구성하라.
3.  **문학적 뉘앙스:** 페르소나 정보와 선호도의 감성, 분위기, 문체 관련 내용을 키워드에 포함시키되, 검색 효율성을 해치지 않도록 명료하게 표현하라.
4.  **단일 문장:** 최종 결과는 오직 검색 쿼리 한 문장이어야 한다.

**출력 (오직 최종 검색 쿼리 한 문장, 다른 설명 절대 금지):**
""",
    input_variables=["history", "query", "persona_info", "preferences"],
    template_format="jinja2",
)

def get_science_final_query_template():
    return PromptTemplate(
    template="""
**명령:** 아래 제공된 모든 정보를 **반드시 종합적으로 분석**하여, 과학/기술 도서 검색에 최적화된 **정확하고 구체적인 키워드 중심의 최종 검색 쿼리**를 **단 한 문장**으로 생성하라.

**입력 정보:**
[대화 요약]
{{ history }}
[사용자 요청]
{{ query }}
[페르소나 정보]
정확하고 논리적인 분석, 최신 기술 동향, 전문 지식, 데이터 기반 접근
[사용자 선호도 요약]
{{ preferences }}

**쿼리 생성 지침:**
1.  **정보 통합:** 모든 입력 정보(대화 맥락, 요청, 페르소나, 선호도)를 누락 없이 반영하라.
2.  **키워드 중심:** 검색 시스템이 효과적으로 인식할 수 있는 전문 용어, 기술 명칭, 핵심 개념 위주로 구성하라.
3.  **정확성/구체성:** 페르소나 정보와 선호도의 기술 분야, 난이도, 최신성 요구 등을 명확한 키워드로 반영하라.
4.  **단일 문장:** 최종 결과는 오직 검색 쿼리 한 문장이어야 한다.

**출력 (오직 최종 검색 쿼리 한 문장, 다른 설명 절대 금지):**
""",
    input_variables=["history", "query", "persona_info", "preferences"],
    template_format="jinja2",
)

def get_general_final_query_template():
    return PromptTemplate(
    template="""
**명령:** 아래 제공된 모든 정보를 **반드시 종합적으로 분석**하여, 범용 도서 검색에 가장 유용한 **핵심 키워드 중심의 최종 검색 쿼리**를 **단 한 문장**으로 생성하라.

**입력 정보:**
[대화 요약]
{{ history }}
[사용자 요청]
{{ query }}
[페르소나 정보]
{{ persona_info }} (친절, 균형잡힌 정보, 다양한 분야 포괄)
[사용자 선호도 요약]
{{ preferences }}

**쿼리 생성 지침:**
1.  **정보 통합:** 모든 입력 정보(대화 맥락, 요청, 페르소나, 선호도)를 누락 없이 반영하라.
2.  **키워드 중심:** 검색 시스템이 효과적으로 인식할 수 있는 명확한 명사, 핵심 요구사항 키워드 위주로 구성하라.
3.  **균형과 명료성:** 다양한 선호도를 반영하되, 가장 핵심적인 요구사항을 명확한 키워드로 표현하여 검색 효율성을 높여라.
4.  **단일 문장:** 최종 결과는 오직 검색 쿼리 한 문장이어야 한다.

**출력 (오직 최종 검색 쿼리 한 문장, 다른 설명 절대 금지):**
""",
    input_variables=["history", "query", "persona_info", "preferences"],
    template_format="jinja2",
)

# 5. Refine Prompt
def get_literature_refine_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]를 아래 지침에 따라 **문학적 감성을 반영**하면서도 **검색에 용이한 간결한 단일 문장**으로 정제하라.

**정제 지침:**
1.  **유사성 표현 처리:** "~~비슷한", "~ 같은", "~ 분위기의" 등의 표현이 있으면, 해당 대상의 **문학적 특징(장르, 문체, 감정선, 시대 등)을 분석하여 명시적인 키워드로 확장**하라. 단, 원본의 책 제목이나 저자 이름은 직접 포함하지 마라.
    *   예시 (입력: '데미안' 같은 성장 소설) -> 정제: 내면 성찰을 다루는 철학적 성장 소설 추천
2.  **핵심 의도 유지:** 원본 쿼리의 핵심 검색 의도는 반드시 보존해야 한다.
3.  **간결성 및 명확성:** 불필요한 수식어나 설명은 제거하고, 검색 키워드가 될 수 있는 명료한 단어 위주로 구성하라.
4.  **문학적 표현:** 서정적이거나 감성적인 표현을 사용하되, 검색 시스템이 이해할 수 있는 수준을 유지하라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 정제된 단일 검색 쿼리 문장, 다른 설명 절대 금지):**
[정제된 검색 쿼리]
""",
    template_format="jinja2",
)

def get_science_refine_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]를 아래 지침에 따라 **객관적이고 논리적인 표현**을 사용하여 **정확하고 간결한 단일 문장**으로 정제하라.

**정제 지침:**
1.  **유사성 표현 처리:** "~~비슷한", "~ 같은" 등의 표현이 있으면, 해당 대상의 **기술적 특징(핵심 기술, 분야, 방법론, 난이도 등)을 분석하여 명시적인 키워드로 확장**하라. 단, 원본의 책 제목이나 저자 이름은 직접 포함하지 마라.
    *   예시 (입력: '핸즈온 머신러닝' 같은 책) -> 정제: 사이킷런과 텐서플로우 예제 중심의 실습형 머신러닝 입문서 추천
2.  **핵심 의도 유지:** 원본 쿼리의 핵심 검색 의도는 반드시 보존해야 한다.
3.  **간결성 및 정확성:** 불필요한 표현은 제거하고, 정확한 기술 용어와 핵심 개념 위주로 구성하라.
4.  **객관적 표현:** 주관적이거나 모호한 표현 대신, 명확하고 객관적인 과학/기술 용어를 사용하라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 정제된 단일 검색 쿼리 문장, 다른 설명 절대 금지):**
[정제된 검색 쿼리]
""",
    template_format="jinja2",
)

def get_general_refine_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]를 아래 지침에 따라 **사용자 의도를 명확히 반영**하여 **친절하고 이해하기 쉬운 간결한 단일 문장**으로 정제하라.

**정제 지침:**
1.  **유사성 표현 처리:** "~~비슷한", "~ 같은", "~ 분위기의" 등의 표현이 있으면, 해당 대상의 **주요 특징(장르, 핵심 소재, 스타일, 목적 등)을 분석하여 명시적인 키워드로 확장**하라. 단, 원본의 책 제목이나 저자 이름은 직접 포함하지 마라.
    *   예시 (입력: '나미야 잡화점의 기적' 같은 힐링 소설) -> 정제: 따뜻한 위로와 감동을 주는 일본 힐링 소설 추천
2.  **핵심 의도 유지:** 원본 쿼리의 핵심 검색 의도는 반드시 보존해야 한다.
3.  **간결성 및 명확성:** 불필요한 수식어나 모호한 표현은 제거하고, 사용자의 요구사항을 명확히 나타내는 단어 위주로 구성하라.
4.  **친절한 표현:** 딱딱하거나 전문적이지 않은, 일반 사용자가 이해하기 쉬운 표현을 사용하라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 정제된 단일 검색 쿼리 문장, 다른 설명 절대 금지):**
[정제된 검색 쿼리]
""",
    template_format="jinja2",
)
    
# 6. Query Expansion Prompt
def get_literature_expansion_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]의 **핵심 의도를 반드시 유지**하면서, **문학적 감성과 관련된 다양한 측면(유사 장르, 다른 시대, 관련 주제, 다른 작가 등)을 탐색**할 수 있는 **관련성 높은 확장 검색 쿼리 3개**를 생성하라.

**확장 지침:**
1.  **핵심 의도 유지:** 확장 쿼리는 원본 쿼리의 주제나 분위기에서 크게 벗어나서는 안 된다.
2.  **문학적 다양성 추구:** 원본 쿼리와 관련되면서도 다른 각도(예: 다른 감정선, 문체, 배경)에서 탐색할 수 있도록 다양하게 생성하라.
3.  **관련성:** 생성된 쿼리는 원본 쿼리와 명확한 관련성을 가져야 한다.
4.  **형식 엄수:** **번호(1., 2., 3.)가 매겨진 목록 형식**으로, 각 줄에 확장 쿼리 하나씩만 출력하라. 다른 설명은 절대 포함하지 마라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 번호 매겨진 확장 쿼리 목록 3개, 다른 설명 절대 금지):**
[확장된 검색 쿼리 목록]
""",
    template_format="jinja2",
)

def get_science_expansion_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]의 **핵심 의도를 반드시 유지**하면서, **과학/기술 관련 하위 주제, 관련 기술, 응용 분야, 다른 접근법 등을 탐색**할 수 있는 **관련성 높은 확장 검색 쿼리 3개**를 생성하라.

**확장 지침:**
1.  **핵심 의도 유지:** 확장 쿼리는 원본 쿼리의 기술 분야나 주제에서 크게 벗어나서는 안 된다.
2.  **기술적 다양성 추구:** 원본 쿼리와 관련되면서도 다른 각도(예: 심화 이론, 실용적 적용, 다른 프로그래밍 언어, 최신 연구)에서 탐색할 수 있도록 다양하게 생성하라.
3.  **관련성:** 생성된 쿼리는 원본 쿼리와 명확한 기술적/논리적 관련성을 가져야 한다.
4.  **형식 엄수:** **번호(1., 2., 3.)가 매겨진 목록 형식**으로, 각 줄에 확장 쿼리 하나씩만 출력하라. 다른 설명은 절대 포함하지 마라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 번호 매겨진 확장 쿼리 목록 3개, 다른 설명 절대 금지):**
[확장된 검색 쿼리 목록]
""",
    template_format="jinja2",
)

def get_general_expansion_template():
    return PromptTemplate(
    input_variables=["query"],
    template="""
**명령:** 주어진 [원본 검색 쿼리]의 **핵심 의도를 반드시 유지**하면서, **관련 주제, 다른 관점, 사용자의 잠재적 관심사 등 다양한 분야를 탐색**할 수 있는 **관련성 높은 확장 검색 쿼리 3개**를 생성하라.

**확장 지침:**
1.  **핵심 의도 유지:** 확장 쿼리는 원본 쿼리의 핵심 주제나 요구사항에서 크게 벗어나서는 안 된다.
2.  **주제 다양성 추구:** 원본 쿼리와 관련되면서도 다른 각도(예: 유사하지만 다른 장르, 관련 인물 이야기, 사회적 배경)에서 탐색할 수 있도록 다양하게 생성하라.
3.  **관련성:** 생성된 쿼리는 원본 쿼리와 명확한 관련성을 가져야 한다.
4.  **형식 엄수:** **번호(1., 2., 3.)가 매겨진 목록 형식**으로, 각 줄에 확장 쿼리 하나씩만 출력하라. 다른 설명은 절대 포함하지 마라.

[원본 검색 쿼리]
{{ query }}

**출력 (오직 번호 매겨진 확장 쿼리 목록 3개, 다른 설명 절대 금지):**
[확장된 검색 쿼리 목록]
""",
    template_format="jinja2",
)

# 7. Re_ranking Prompt (원본)
def get_re_ranking_prompt():
    return PromptTemplate(
    input_variables=["query", "documents"],
    template="""
사용자의 검색 쿼리는 다음과 같습니다: "{{ query }}"
다음은 검색된 도서 목록입니다 (내용은 일부만 표시됨):
{% for doc in documents %}
{{ loop.index }}. 제목: {{ doc.metadata.get('title', '제목 없음') }}, 저자: {{ doc.metadata.get('author', '저자 없음') }}, 내용 일부: {{ doc.page_content | truncate(200) }}
{% endfor %}

위 검색 결과를 사용자의 검색 쿼리 "{{ query }}"와의 관련성 및 문서 내용의 충실도를 종합적으로 고려하여, 가장 관련성이 높은 도서를 목록의 맨 위로 배치하고, 결과를 도서 제목과 저자만 포함하는 다음 형식으로 출력하라.

[출력 형식 예시]
1. 제목: <가장 관련성 높은 책 제목>, 저자: <저자 이름>
2. 제목: <두 번째 관련성 높은 책 제목>, 저자: <저자 이름>
...
[리랭킹된 도서 목록]
""",
    template_format="jinja2",
)

# 8. HyDE Generation Prompt (원본)
def get_hyde_generation_prompt():
    return PromptTemplate(
    input_variables=["query"],
    template="""
다음 검색 쿼리에 완벽하게 부합하는 **이상적인 가상의 책**을 추천하고, 이를 기반으로 **간결한 요약(2-3 문장)**을 생성해라. 이 요약은 해당 쿼리로 책을 찾는 사용자가 가장 만족할 만한 내용을 담아야 한다. 오직 생성된 요약 텍스트만 출력하라.

[검색 쿼리]
{{ query }}

[가상의 책 요약]
""",
    template_format="jinja2",
)

# 9. Persona Role Instructions (원본)
def get_literature_role():
    return "너는 감성적이고 문학적인 도서 추천 챗봇이다. 사용자의 감정과 취향을 깊이 이해하고 공감하는 말투로 문학적인 표현을 사용하여 책을 추천해라."
def get_science_role():
    return "너는 정확하고 논리적인 과학/기술 도서 추천 챗봇이다. 사용자의 지식 수준과 관심 분야를 파악하고, 최신 정보와 기술 동향을 반영하여 체계적으로 책을 추천해라."
def get_general_role():
    return "너는 친절하고 신뢰할 수 있는 범용 도서 추천 챗봇이다. 친근한 말투로 다양한 분야의 책에 대해 균형 잡힌 시각으로 정보를 제공하고, 사용자의 요구사항에 맞춰 명확하고 이해하기 쉽게 책을 추천해라."

# 10. Hyde Keyword Prompt (원본)
def get_hyde_keyword_prompt():
    return PromptTemplate(
    input_variables=["hyde_summary"],
    template="""
다음은 사용자의 질문에 이상적으로 부합하는 가상의 책 요약입니다:
"{{ hyde_summary }}"

이 요약 내용에서 **핵심 키워드 5개**를 추출하여 쉼표(,)로 구분하여 나열해라. 오직 키워드 목록만 출력하라.

[핵심 키워드 목록]
""",
    template_format="jinja2",
)

# 11. 추천 인삿말 생성 프롬프트
def get_recommendation_intro_prompt():
    return PromptTemplate(
    input_variables=["query", "persona_info"],
    template="""
사용자의 도서 추천 요청은 다음과 같습니다:
"{{ query }}"

챗봇은 다음과 같은 역할을 맡고 있습니다:
"{{ persona_info }}"

위 내용을 고려하여, 추천 리스트를 자연스럽게 시작하는 인삿말을 한두 문장으로 만들어주세요.
예: "이런 책들은 어떠세요?", "다음 책들을 추천드려요!" 등
""",
    template_format="jinja2",
)

# 12. 추천 마무리 멘트 프롬프트
def get_recommendation_outro_prompt():
    return PromptTemplate(
    input_variables=["query", "persona_info"],
    template="""
[사용자의 추천 요청]
"{{ query }}"

[챗봇의 역할]
{{ persona_info }}

위 정보를 고려하여, 추천 리스트의 **마무리 인사말**을 자연스럽고 친근한 말투로 1~2문장 생성하세요.  
사용자가 마음에 드는 책을 발견했기를 바라는 따뜻한 톤이면 좋습니다. 너무 딱딱하지 않게, 대화를 부드럽게 끝맺는 느낌으로 작성하세요.

[예시]
- "하나쯤 읽고 싶은 책이 생기셨길 바라요 :)"
- "마음에 드는 책이 있다면 참 좋겠네요!"
- "더 궁금한 책이 있다면 언제든지 말씀해주세요."

[추천 마무리 멘트]
""",
    template_format="jinja2",
)